# -*- coding: utf-8 -*-
"""
Created on Mon May  1 21:17:16 2017

@author: Daniela Morales C
"""

import numpy as np #Abriendo librerias
import xlwt      # Para escribir en excel 
import xlrd
from xlutils.copy import copy


doc = xlrd.open_workbook('Calculo_cantidad_de_acero.xlsx')
worksheet = doc.sheet_by_name('Hoja1')

Nmomentos = worksheet.cell(1,1) # Llamando el valor de numero de momentos de excel
m = int(Nmomentos.value) # Asignando valor numerico, numero de momentos
M = np.zeros((m,2), dtype = float) #Matriz que acomula los momentos y las distancias

for i in range(m):
    M[i,0] = float(format(worksheet.cell(10+i, 1).value)) #Llenand0 la matriz
    M[i,1] = float(format(worksheet.cell(10+i, 2).value))
print(M)

FC = worksheet.cell(1,2) #f'c del concreto
fc = int(FC.value)

FY = worksheet.cell(1,3) #fy del acero
fy = int(FY.value)

Altura = worksheet.cell(1,4) #Altura de la sección
h = float(Altura.value)

Espesor = worksheet.cell(1,5) #Espesor de la sección
e = float(Espesor.value) 

Base = worksheet.cell(1,6) #Base de la sección
b = float(Base.value) 

DP = worksheet.cell(1,7) #Valor d'
dp = float(DP.value)

fi = 0.9 #Constante fi para diseño
d = float(h)-float(e) #Valor 'd' que depende de la altura y el espesor
em = fy/(0.85*fc) 
print("m: ", em) 


R = np.zeros(int(m))
for j in range(m): 
   R[j] = (M[j,0]*(10**5))/(fi*b*(d**2)) #Calculo de 'R'
print("Verctor R: ", R)


if fc <= 280: #Calculo de beta
 bi = 0.85
elif fc >= 560:
 bi = 0.65
else:
    bi=0.85-(fc-280)*(0.05/70)

p1 = 14/fy   #Cuantia minima
p2 = (0.8*(fc**0.5))/fy
     
if p1>p2:
    pmin = p1
else:
    pmin = p2
print("Pmin: ", pmin) 

cd=0.003/(0.005+0.003) 
pmax = (bi*cd)/em #Cuantia maxima
print("Pmax: ", pmax) 

Rmax=float(pmax*fy*(1-((pmax*em)/2))) #Valor maximo que puede tomar 'R' para refuerzo sencillo
print('Rmax ', Rmax)
Rmin=float(pmin*fy*(1-((pmin*em)/2))) #Valor minimo que puede tomar 'R' para refuerzo sencillo
print('Rmin ', Rmin)

Pdi = np.zeros(int(m)) #Vector que acomula las cuantias de diseño
P = np.zeros(int(m)) #Vector que acomula las cuantias a usar
As2 = np.zeros(int(m)) #Vector que acomula las areas de acero del doble refuerzo
As = np.zeros(int(m)) #Vector que acomula las areas totales de acero en la zona de tension
CD = np.zeros(int(m)) #Vector que acomula el valor c/d de la sección
es = np.zeros(int(m)) #Vector que acomula el valor de la deformación del acero en tensión
esp = np.zeros(int(m)) #Vector que acomula el valor de la deformación del acero en compresión           
             
n=0
for n in range(m):
    DM=0
    As1=0
    Pdi[n] = (1/em)*(1-((1-((2*em*R[n])/fy))**0.5)) #Calculo de la cuantia de diseño
   
    if Pdi[n]<pmin: #Si la cuantia de diseño es menor a la minimma se toma la minima
       P[n] = pmin
       As[n] = P[n]*b*d
       c = ((As[n])*fy)/(0.85*fc*b*bi)
       CD[n] = c/d
       esp[n] = 0
       es[n] = (0.003*(d-c))/c
         
         
    elif Pdi[n]>pmax:
       DM = (M[n,0])-((Rmax*fi*b*(d**2))/(10**5)) #Momento que no alcanza a satisfacer la cuantia maxima
       print ('DM', DM)
       As1 = pmax*b*d
       print('As1', As1)
       c = (As1*fy)/(0.85*fc*b*bi)
       
       As2[n] = (DM*(10**5))/(fi*fy*(d-dp))
       As[n] = As1+As2[n]
            
       esp[n] = (0.003*(c-dp))/c
       es[n] = (0.003*(d-c))/c
       CD[n] = c/d
           
       if esp[n] <= 0.0020 and es[n] > 0.0049:  #Recalcular c
           
           
           esp[n] = (0.003*(c-dp))/c
           es[n] = (0.003*(d-c))/c
           P[n] = float(As[n]/(b*d))
           CD[n] = c/d
           As2[n] = ((DM*(10**5))/(fi*fy*(d-dp)))
           As[n] = As1+As2[n]*((esp[n]*2000000)/fy) 
           print('esp[n]', esp[n])
           print(fy)
           
    else:
       P[n]=Pdi[n]  #Si la cuantia de diseño esta en los rangos permitidos se toma la de diseño.
       As[n] = P[n]*b*d
       c = ((As[n])*fy)/(0.85*fc*b*bi)
       CD[n] = c/d
       esp[n] = 0
       es[n] = (0.003*(d-c))/c
     
print("Verctor Pdi: ", Pdi)
print("Verctor P: ", P)
print("Verctor As: ", As)
print("Verctor As2: ", As2)
print("Verctor CD: ", CD)
print("Verctor es: ", es)
print("Verctor esp: ", esp)

ws = copy(doc)
ws.save('Resultados_cantidad_de_acero.xlsx')

rb = xlrd.open_workbook('Resultados_cantidad_de_acero.xlsx')
wb = copy(rb)
w_sheet = wb.get_sheet(0)



for i in range (m):
    
    w_sheet.write(3,1,"valor ø")
    w_sheet.write(4,1,fi)
    w_sheet.write(3,2,"valor β")
    w_sheet.write(4,2,bi)
    w_sheet.write(3,3,"valor ρmin")
    w_sheet.write(4,3,pmin)
    w_sheet.write(3,4,"valor ρmax")
    w_sheet.write(4,4,pmax)   
    
    
    w_sheet.write(9,3,"Valor R")
    w_sheet.write(9,4,"ρ de diseño")
    w_sheet.write(9,5,"ρ de final") 
    w_sheet.write(9,6,"c\d")    
    w_sheet.write(9,7,"εs tensión")
    w_sheet.write(9,8,"εs compresión")
    w_sheet.write(9,9,"Area de acero Tensión")
    w_sheet.write(9,10,"Area de acero Compresión")
    
    w_sheet.write(10+i,3,R[i])      
    w_sheet.write(10+i,4,Pdi[i])
    w_sheet.write(10+i,5,P[i])
    w_sheet.write(10+i,6,CD[i])
    w_sheet.write(10+i,7,es[i])
    w_sheet.write(10+i,8,esp[i])
    w_sheet.write(10+i,9,As[i])
    w_sheet.write(10+i,10,As2[i])
   
 
wb.save('Resultados_cantidad_de_acero.xlsx')
